/*
 * main.c
 *
 *  Created on: Oct 21, 2019
 *      Author: PoopieJoe
 */

#include <stdio.h>
#include <math.h>
#include "xil_printf.h"
#include "xil_io.h"
#include "hdr/errorcodes.h"
//#include "hdr/i2c.h"
#include "xparameters.h"
#include "xiic_l.h"
#include "xiic.h"
#include "xil_exception.h"
#include "sleep.h"
#include "xil_types.h"
#include "xil_assert.h"
#include "bspconfig.h"
#include "xtime_l.h"

#define MPU6050_I2C_ADDR (0b1101000)
#define MPU6050_ACCEL_XOUT_H (0x3B)
#define MPU6050_GYRO_XOUT_H (0x43)

#define MPU_6050_SMPLRT_DIV (0x19)

#define MPU6050_GYRO_CONFIG (0x1B)
#define MPU6050_ACCEL_CONFIG (0x1C)
#define MPU6050_PWR_MGMT_1 (0x6B)

#define MPU_6050_WHO_AM_I (0x75)

#define IIC_DEV_ID 		(XPAR_AXI_IIC_0_DEVICE_ID)
#define IIC_BASE_ADDR 	(XPAR_AXI_IIC_0_BASEADDR)

#define MPU_ACCEL_SENSITIVITY (float)(16384) //sensitivity of the accelecrometer measurement in LSB/g. Convert from binary value to g's by dividing the raw value by this, and subtract 2
#define MPU_GYRO_SENSITIVITY (float)(131) //sensitivity of the gyroscopr measurement in LSB/(deg/s). convert from binary value to deg/s by dividing the raw value by this, and subtract 250

#define ASCII_DATA	2
#define DIGITS 1000
#define GRAV_CONST 9.81

#define K1 k[0]
#define K2 k[1]
#define K3 k[2] //Super gaaf
#define K4 k[3]

//0xD0 0xD0 0xCA 0xFE
const unsigned int PREFIX = 0xD0D0CAFE;

typedef struct
{
	short x,y,z;
}accelreading_raw_t;

typedef struct
{
	float x,y,z;
}accelreading_t;

typedef struct
{
	short x,y,z;
}gyroreading_raw_t;

typedef struct
{
	float x,y,z;
}gyroreading_t;

typedef struct
{
	float theta,phi,psi;
}orientation_t;

typedef struct
{
	float x,y,z;
}position_t;

u8 mpu6050_reg_read( u8 regaddr );
u8 mpu6050_reg_write( u8 regaddr , u8 data );
void mpu6050_reg_read_multiple( u8 regaddr , u8 num_bytes , u8* data);
accelreading_raw_t mpu6050_readaccel( void );
gyroreading_raw_t mpu6050_readgyro( void );
accelreading_t convert_accelreading(accelreading_raw_t reading);
gyroreading_t convert_gyroreading( gyroreading_raw_t reading );
void send_data(uint8_t * data, uint16_t len);
void printfloat_data(char* pre_string, float data1, float data2, float data3, char* post_string);
float runge_kutta(float cur_val, float cur_dxdt, float pre_dxdt, float pre2_dxdt, float dt)
{
	return cur_val + dt/6*(pre2_dxdt + 4*pre_dxdt + cur_dxdt);
}

setup_status_t setup()
{
	setup_status_t status = setup_succes;
	//setup sensor stuff
	mpu6050_reg_write(MPU6050_PWR_MGMT_1, 	mpu6050_reg_read(MPU6050_PWR_MGMT_1) 	& !0xF8 ); //set clock to internal 8MHz
	mpu6050_reg_write(MPU6050_PWR_MGMT_1, 	mpu6050_reg_read(MPU6050_PWR_MGMT_1) 	& !0x40 ); //disable sleep
	mpu6050_reg_write(MPU6050_GYRO_CONFIG, 	mpu6050_reg_read(MPU6050_GYRO_CONFIG) 	& !0x18 ); //set gyro scale to +-250 deg/s
	mpu6050_reg_write(MPU6050_ACCEL_CONFIG, mpu6050_reg_read(MPU6050_ACCEL_CONFIG) 	& !0x18 ); //set accel scale to +-2g
	mpu6050_reg_write(MPU_6050_SMPLRT_DIV, 0x0); //set sample rate divider to 0

	//setup serial comms
	if (0)
	{
		return setup_serial_fail;
	}

	return status;
};

int main()
{
	u8 running = 1;
	setup_status_t setup_status = setup();

	if (setup_status != setup_succes) running = 0;
	//main loop, running at approx 8kHz
	u32 counter = 0;
	accelreading_t body_acceleration = {.x = 0, .y = 0, .z = 0};
	gyroreading_t body_rates = {.x = 0, .y = 0, .z = 0};
	orientation_t orientation = {.phi = 0, .psi = 0, .theta = 0};
	position_t position = {.x = 0, .y = 0, .z = 0};
	float delta_time_gyro = 0.000125;		//8kSps for gyro
	float delta_time_accel = 0.001;		//1kSps for accel
	float euler_rate_phi[3] = {0,0,0};
	float euler_rate_theta[3] = {0,0,0};
	float euler_rate_psi[3] = {0,0,0};
	float accel_x[3] = {0,0,0};
	float accel_y[3] = {0,0,0};
	float accel_z[3] = {0,0,0};
	float velocity_x[3] = {0,0,0};
	float velocity_y[3] = {0,0,0};
	float velocity_z[3] = {0,0,0};
	double time_cur = 0, time_pre_gyro = 0, time_pre_accel = 0;	//time calculations
	struct { float x; float y; float z; } gravity_vector =
	{
		.x = 0,
		.y = 0,
		.z = 0
	};	//magnitude of gravity in each of the cardinal directions, determined during calibration

	//calibration
	const int gyro_calibration_samples = 1000;
	gyroreading_t tmp_gyro_calibration[gyro_calibration_samples];
	for (int i = 0; i < gyro_calibration_samples; i++)
	{
		tmp_gyro_calibration[i] = convert_gyroreading( mpu6050_readgyro() );
	}

	//average measurements to get offset
	gyroreading_t gyro_offset = {.x = 0, .y = 0, .z = 0};
	for (int i = 0; i < gyro_calibration_samples; i++)
	{
		gyro_offset.x += tmp_gyro_calibration[i].x/gyro_calibration_samples;
		gyro_offset.y += tmp_gyro_calibration[i].y/gyro_calibration_samples;
		gyro_offset.z += tmp_gyro_calibration[i].z/gyro_calibration_samples;
	}


	while(running)
	{
		XTime tmp_time;
		XTime_GetTime(&tmp_time);
		time_cur = tmp_time/COUNTS_PER_SECOND;
		delta_time_gyro = time_pre_gyro - time_cur;
		delta_time_accel = time_pre_accel - time_cur;
		//start reading

		//convert raw values to real numbers
		body_rates = convert_gyroreading( mpu6050_readgyro() );

		//remove offset
		body_rates.x -= gyro_offset.x;
		body_rates.y -= gyro_offset.y;
		body_rates.z -= gyro_offset.z;

		if ( (counter % 8) == 0 )
		{
			if ( (counter % 400) == 0 )
			{
				//@20Hz
				//output stuff to console

				#if ASCII_DATA == 2
					   xil_printf("Prefix = 0xD0D0CAFE\r\n");
					   printfloat_data(",", accel_x[0], accel_y[0], accel_z[0], "");
					   printfloat_data(",", body_rates.x, body_rates.y, body_rates.z, ",\r\n");
//					   printfloat_data("rates: ", euler_rate_phi_cur, euler_rate_theta_cur, euler_rate_psi_cur, "\r\n");
//					   xil_printf("%d", delta_time_gyro * 1000000);
				#else
					   uint8_t data[sizeof(PREFIX) + sizeof(position) + sizeof(orientation)] = { PREFIX >> 24, PREFIX >> 16, PREFIX >> 8, PREFIX };
					   memcpy(data + sizeof(PREFIX), &position, sizeof(position));
					   memcpy(data + sizeof(PREFIX) + sizeof(position), &orientation, sizeof(orientation));
					   send_data(data, sizeof(PREFIX) + sizeof(position) + sizeof(orientation));
				#endif
			}
			//@1kHz
			body_acceleration = convert_accelreading(mpu6050_readaccel());

			//run algorithm calculations
			//convert accelerations to be relative to gravity
			accel_x[0] = 	body_acceleration.x * (cos(orientation.phi))
								+ body_acceleration.z * (sin(orientation.psi));

			accel_y[0] =	body_acceleration.x * (sin(orientation.phi))
								+ body_acceleration.y * (cos(orientation.theta));

			accel_z[0] =	body_acceleration.y * (sin(orientation.theta))
								+ body_acceleration.z * (cos(orientation.psi));

			//subtract gravity from the acceleration
			accel_x[0] -= gravity_vector.x;
			accel_y[0] -= gravity_vector.y;
			accel_z[0] -= gravity_vector.z;

			//integrate to get new velocity
			velocity_x[0] = runge_kutta(velocity_x[0], accel_x[0], accel_x[1], accel_x[2], 2*delta_time_accel);
			velocity_y[0] = runge_kutta(velocity_y[0], accel_y[0], accel_y[1], accel_y[2], 2*delta_time_accel);
			velocity_z[0] = runge_kutta(velocity_z[0], accel_z[0], accel_z[1], accel_z[2], 2*delta_time_accel);

			//integrate to get new position
			position.x = runge_kutta(position.x, velocity_x[0], velocity_x[1], velocity_x[2], 2*delta_time_accel);
			position.y = runge_kutta(position.y, velocity_y[0], velocity_y[1], velocity_y[2], 2*delta_time_accel);
			position.z = runge_kutta(position.z, velocity_z[0], velocity_z[1], velocity_z[2], 2*delta_time_accel);

			//make current samples the previous samples in anticipation of the next loop
			for (int i = 1; i < 3; i++)
			{
				velocity_x[i] = velocity_x[i-1];
				velocity_y[i] = velocity_y[i-1];
				velocity_z[i] = velocity_z[i-1];
				accel_x[i] = accel_x[i-0];
				accel_y[i] = accel_y[i-0];
				accel_z[i] = accel_z[i-0];
			}

			time_pre_accel = time_cur;
		}

		//run algorithm calculations

		//convert body rates to euler rates
		//phi -> angle between x and y
		//theta -> angle between x and z
		//psi -> angle between y and z
		euler_rate_phi[0] = 	body_rates.x
								+ body_rates.y*(sinf(orientation.phi))*(tanf(orientation.theta))
								+ body_rates.z*(cosf(orientation.phi))*(tanf(orientation.theta));

		euler_rate_theta[0] = 	body_rates.y*(cosf(orientation.phi))
								- body_rates.z*(sinf(orientation.phi));

		euler_rate_psi[0] = 	body_rates.y*((sinf(orientation.phi))/(cosf(orientation.theta)))
								+ body_rates.z*((cosf(orientation.phi))/(cosf(orientation.theta)));

		//calculate new orientation from euler rates
		orientation.theta = 	runge_kutta(orientation.theta, euler_rate_theta[0], euler_rate_theta[1], euler_rate_theta[2], delta_time_gyro*2);
		orientation.phi = 		runge_kutta(orientation.phi, euler_rate_phi[0], euler_rate_phi[1], euler_rate_phi[2], delta_time_gyro*2);
		orientation.psi = 		runge_kutta(orientation.psi, euler_rate_psi[0], euler_rate_psi[1], euler_rate_psi[2], delta_time_gyro*2);

		//make current samples the previous samples in anticipation of the next loop
		for (int i = 1; i < 3; i++)
		{
			euler_rate_phi[i] = euler_rate_phi[i-1];
			euler_rate_psi[i] = euler_rate_psi[i-1];
			euler_rate_theta[i] = euler_rate_theta[i-1];
		}

		if (counter >= 10000) { counter = 0; } else { counter++; };
		usleep(125); //0.125 ms per loop (yes this is inaccurate but we didn't have enough time to get timers working so heck you)
		time_pre_gyro = time_cur;
	}
	return 0;
}

u8 mpu6050_reg_read( u8 regaddr )
{
	u8 readval = 0xFF;
	XIic_Send(IIC_BASE_ADDR,MPU6050_I2C_ADDR,&regaddr,1,XIIC_STOP);
	XIic_Recv(IIC_BASE_ADDR,MPU6050_I2C_ADDR,&readval,1,XIIC_STOP);
	return readval;
}

u8 mpu6050_reg_write( u8 regaddr , u8 data )
{
	u8 write_buf[2] = {regaddr, data};
	u8 bytes_sent = XIic_Send(IIC_BASE_ADDR, MPU6050_I2C_ADDR, write_buf, 2, XIIC_STOP);
	if (bytes_sent != 2)
	{
		return 0xFF;
	}
	return 0;
}

void mpu6050_reg_read_multiple( u8 regaddr , u8 num_bytes , u8* data)
{
	XIic_Send(IIC_BASE_ADDR,MPU6050_I2C_ADDR,&regaddr,1,XIIC_STOP);
	XIic_Recv(IIC_BASE_ADDR,MPU6050_I2C_ADDR,data,num_bytes,XIIC_STOP);
}

accelreading_raw_t mpu6050_readaccel( void )
{
	accelreading_raw_t result;
	u8 tmp[6];
	mpu6050_reg_read_multiple(MPU6050_ACCEL_XOUT_H,6,tmp);
	result.x = (short)((u16)tmp[0] << 8) | tmp[1];
	result.y = (short)((u16)tmp[2] << 8) | tmp[3];
	result.z = (short)((u16)tmp[4] << 8) | tmp[5];
	return result;
}

gyroreading_raw_t mpu6050_readgyro( void )
{
	gyroreading_raw_t result;
	u8 tmp[6];
	mpu6050_reg_read_multiple(MPU6050_GYRO_XOUT_H,6,tmp);
	result.x = (short)((u16)tmp[0] << 8) | tmp[1];
	result.y = (short)((u16)tmp[2] << 8) | tmp[3];
	result.z = (short)((u16)tmp[4] << 8) | tmp[5];
	return result;
}

accelreading_t convert_accelreading(accelreading_raw_t reading)
{
	accelreading_t result = {.x = 0, .y = 0, .z = 0};
	result.x = ( (float)(reading.x) / MPU_ACCEL_SENSITIVITY ) * GRAV_CONST;
	result.y = ( (float)(reading.y) / MPU_ACCEL_SENSITIVITY ) * GRAV_CONST;
	result.z = ( (float)(reading.z) / MPU_ACCEL_SENSITIVITY ) * GRAV_CONST;

	return result;
}

//convert to rad/s
gyroreading_t convert_gyroreading( gyroreading_raw_t reading )
{
	gyroreading_t result;
	result.x = ( (float)(reading.x) / MPU_GYRO_SENSITIVITY ) * (M_PI/180);
	result.y = ( (float)(reading.y) / MPU_GYRO_SENSITIVITY ) * (M_PI/180);
	result.z = ( (float)(reading.z) / MPU_GYRO_SENSITIVITY ) * (M_PI/180);

	return result;
}

void printfloat_data(char* pre_string, float data1, float data2, float data3, char* post_string)
{
	int data[6];

	data[0] = (int)data1;
	data[1] = ((data1 - data[0]) * DIGITS) < 0 );
	data[2] = (int)data2;
	data[3] = (data2 - data[2]) * DIGITS;
	data[4] = (int)data3;
	data[5] = (data3 - data[4]) * DIGITS;
	xil_printf("%s(%d.%3d, %d.%3d, %d.%3d)%s \r\n", pre_string, data[0], data[1], data[2], data[3], data[4], data[5], post_string);
}

void send_data(uint8_t * data, uint16_t len)
{
#if ASCII_DATA == 1
	for (int i = 0; i<len-2; i+=2)
	{
		xil_printf("%.2x %.2x : ", data[i], data[i + 1]);

	}
	xil_printf("%.2x %.2x\r\n", data[len-2], data[len-1]);

#else //Normal data
	for(uint16_t i = 0; i < len; i++)
	{
		outbyte(data[i]);
	}
#endif //ASCII_DATA

}

//int send_cords(cords_t *cords_p)
//{
//	uint8_t data[sizeof(PREFIX)+sizeof(cords_t)]={PREFIX>>24, PREFIX>>16, PREFIX>>8, PREFIX};
//	memcpy(data+sizeof(PREFIX), cords_p, sizeof(cords_t));
//	send_data(data, sizeof(PREFIX)+sizeof(cords_t));
//	return 0;
//}
void delay_ms(uint32_t ms)
{
	usleep(ms*1000);
}

